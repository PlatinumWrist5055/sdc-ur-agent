#!/usr/bin/env node

var execFile = require('child_process').execFile
  , amqp = require('./amqp')
  , fs   = require('fs')
  , sys  = require('sys')
  , path = require('path')

debug = false;
if (process.env['UR_DEBUG']) {
  debug = true;
}

var creds
  = { host:     process.env['AMQP_HOST']      || 'localhost'
    , port:     process.env['AMQP_PORT']      || 5672
    , login:    process.env['AMQP_LOGIN']     || 'guest'
    , password: process.env['AMQP_PASSWORD']  || 'guest'
    , vhost:    process.env['AMQP_VHOST']     || '/'
    };

var nodeUUID;
var exchange;
var queue;
var sysinfo;

var connection = amqp.createConnection(creds);
var reconnectionInterval;

var reconnectAttempts = 0;
var maxReconnectAttempts = 3;

connect();

function connect () {
  console.log("Connecting");
  connection = amqp.createConnection(creds);

  // Wait until connection is made.
  connection.on('ready', function (e) {
    reconnectionInterval && clearInterval(reconnectionInterval);
    reconnectionInterval = undefined;
    console.log("AMQP Ready");

    // Grab the sysinfo and publish a startup message indicating we've come
    // online and are ready to receive requests.
    loadSysinfo(function (error, exitStatus, stdout, stderr) {
      if (error) {
        console.log("sysinfo error: " + stderr.toString());
        dump(arguments);
        return;
      }

      // output of sysinfo is a JSON object
      sysinfo = JSON.parse(stdout);

      // Use the UUID param to uniquely identify this machine on AMQP.
      nodeUUID = sysinfo['UUID'];
      if (!nodeUUID) {
        throw new Error("Could not find 'UUID' in `sysinfo` output.");
      }

      // Open the exchange where we will publish outbound messages.
      exchange = connection.exchange('amq.topic', { type: 'topic' });

      bindQueue();
    });
  });

  connection.on('error', function (e) {
    sys.log('AMQP connection error: ' + e.message);
  });

  connection.on('close', function (e) {
    switch (connection.readyState) {
      case 'opening':
        if (reconnectionInterval || !e)
          break;
      case 'closed':
        reconnectionInterval = setInterval(function () {
          connect();
        }, 5000);
        break;
    }
  });
}

function bindQueue () {
  queue = connection.queue('ur.request.'+nodeUUID, { exclusive: true });
  
  queue.on('error', function (e) {
    var AMQP_RESOURCE_LOCKED = 405;

    if (e.code !== 405) {
      console.error("AMQP Queue Error received: " + e.message);
      return;
    }

    if (++reconnectAttempts > maxReconnectAttempts) {
      console.log("Could not acquire exclusive ur queue after "
                  + reconnectAttempts + " attempts.")
      process.exit(1);
    }

    console.log("Detected another client our the Ur queue (Attempt: "
                + [reconnectAttempts, maxReconnectAttempts].join('/') + ")");
    exchange.publish(pjoin("ur.execute.", nodeUUID, genId()), {});

    setTimeout(function () {
      connect();
      setTimeout(function () {
        bindQueue();
      }, 2000);
    }, 5000);
  });

  queue.on('open', function () {
    reconnectAttempts = 0;
    queue.bind('amq.topic', 'ur.execute.' + nodeUUID + '.*');
    queue.bind('amq.topic', 'ur.broadcast.*.*');
    queue.subscribeJSON({ ack: true }, onExecute);

    var urStartupFilePath = '/tmp/.ur-startup';
    path.exists(urStartupFilePath, function (exists) {
      if (!exists) {
        fs.writeFile(urStartupFilePath, "", function (error) {
          if (error)
            throw error;

          // Open the exchange where we will publish outbound messages.
          var routingKey = 'ur.startup.' + nodeUUID;
          console.log("Sending startup message to routing key " + routingKey);
          dump(sysinfo);
          exchange.publish(routingKey, sysinfo);
        });
      }
    });
  });
}

function onExecute (m) {
  console.log("Received a message to routing key: " + m._routingKey);
  dump(m);
  queue.shift();

  // Save the request id so we can reference it in the reply's routing key.
  var key = m._routingKey.split('.', 4);
  var reqID = key[3];

  if (key[1] == 'broadcast') {
    switch (key[2]) {
      case 'sysinfo': {
        loadSysinfo(function (error, exitStatus, stdout, stderr) {
          if (error) {
            console.log("broadcast sysinfo error: " + stderr.toString());
            return;
          }
          publishBroadcastReply(reqID, JSON.parse(stdout));
        });
        return;
      }
    }

    console.log("unknown broadcast key '" + key[2] + "'");
    return;
  }

  switch (m.type) {
    case 'file':
      executeFile
        ( m.file
        , m.env
        , m.args
        , replyFn
        );
      break;
  
    case 'script':
      executeScript
        ( m.script
        , m.env
        , m.args
        , replyFn
        );
      break;
  }

  function replyFn(exitStatus, stdout, stderr) {
    // An exit status of 113 from the executable indicates that we want the
    // machine to reboot after we reply.
    publishExecuteReply
      ( reqID
      , exitStatus === 113 ? 0 : exitStatus
      , stdout
      , stderr
      , function () {
          // Reboot if the exit status code is 113. 113 or 1/13 is the 30th
          // prime number and also an "Einstein Prime".
          if (exitStatus !== 113) {
            return;
          }

          // Allow some time for node gnomes to carry our reply AMQP packets
          // away before we reboot the machine.
          setTimeout(function () {
            connection.end();
            (debug ? fakeReboot : reboot)();
          }, 1000);
        }
      );
  }
}

function reboot() {
  execFile
    ( '/usr/sbin/reboot'
    , []
    , function () {
        // Stare into the abyss.
      }
    );
}

function fakeReboot() {
  console.log("I am so rebooting right now.");
  process.exit(0);
}

// Execute a file and then call callback with captured output and exit status
// code.
function executeFile(filename, env, args, callback) {
  console.log("Executing file: " + filename);
  execFile
    ( filename
    , args || []
    , env ? { env: env } : {}
    , function (error, stdout, stderr) {
        if (error) {
          callback(error.code, stdout.toString(), stderr.toString());
          return;
        }
        stdout = stdout.toString();
        stderr = stderr.toString();

        console.log("Exit status for " + filename + " was " + (error ? error.code : 0));
        console.log("STDOUT:");
        console.log(stdout);
        console.log("STDERR:");
        console.log(stderr);

        callback(0, stdout, stderr);
      }
    );
}

// Execute a script string.
function executeScript(script, env, args, callback) {
  console.log("Executing script: " + script);
  var filename = tmpFilename();
  console.log("Writing file " + filename);

  // Write file, 'chmod 700' it, run it, delete file.
  fs.writeFile(filename, script, function () {
    fs.chmod(filename, 0700, function () {
      executeFile(filename, env, args, function () {
        var execArgs = arguments;
        fs.unlink(filename, function () {
          callback.apply(undefined, execArgs);
        });
      });
    });
  });
}

// Publish an 'ur.execute-reply'-type message to AMQP.
function publishExecuteReply(reqID, exitStatus, stdout, stderr, callback) {
  var reply = { exit_status: exitStatus
              , stdout:      stdout
              , stderr:      stderr
              };
  var routingKey = 'ur.execute-reply.' + nodeUUID + '.' + reqID;
  console.log("Publishing execute-reply to request " + reqID + ":");
  dump(reply);

  exchange.publish
    ( routingKey
    , reply
    );
  callback();
}

function publishBroadcastReply(reqID, reply) {
  var routingKey = 'ur.execute-reply.' + nodeUUID + '.' + reqID;
  console.log("Publishing execute-reply to broadcast request " + reqID + ":");
  dump(reply);

  exchange.publish
    ( routingKey
    , reply
    );
}

// Quick and dirty generation of tmp filenames.
function tmpFilename() {
  return "/tmp/ur-" + genId();
}

// Run the sysinfo script and return the captured stdout, stderr, and exit
// status code.
function loadSysinfo (callback) {
  var paramsExecutable
    = debug ? './sysinfo-fake.sh' : '/usr/bin/sysinfo';

  execFile
    ( paramsExecutable
    , []
    , function (exitStatus, stdout, stderr) {
        if (exitStatus)
          return callback(new Error(stderr), exitStatus, stdout, stderr);
       
        callback
          ( undefined
          , exitStatus
          , stdout.toString().trim()
          , stderr.toString().trim()
          );
        return;
      }
    );
} 

// Generate a hex representation of a random four byte string.
function genId() {
  return Math.floor(Math.random() * 0xffffffff).toString(16);
};

function dump(obj, depth) {
  console.log(sys.inspect(obj, true, depth ? depth : 20));    
}

function pjoin () {
  return Array.prototype.join.call(arguments, '.');
}

// vim:ft=javascript
